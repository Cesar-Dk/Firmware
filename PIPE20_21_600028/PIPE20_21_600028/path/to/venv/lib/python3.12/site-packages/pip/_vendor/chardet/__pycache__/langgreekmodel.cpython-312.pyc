em                 : QAccessible.Role = ... # 0xc
        ToolTip                  : QAccessible.Role = ... # 0xd
        Application              : QAccessible.Role = ... # 0xe
        Document                 : QAccessible.Role = ... # 0xf
        Pane                     : QAccessible.Role = ... # 0x10
        Chart                    : QAccessible.Role = ... # 0x11
        Dialog                   : QAccessible.Role = ... # 0x12
        Border                   : QAccessible.Role = ... # 0x13
        Grouping                 : QAccessible.Role = ... # 0x14
        Separator                : QAccessible.Role = ... # 0x15
        ToolBar                  : QAccessible.Role = ... # 0x16
        StatusBar                : QAccessible.Role = ... # 0x17
        Table                    : QAccessible.Role = ... # 0x18
        ColumnHeader             : QAccessible.Role = ... # 0x19
        RowHeader                : QAccessible.Role = ... # 0x1a
        Column                   : QAccessible.Role = ... # 0x1b
        Row                      : QAccessible.Role = ... # 0x1c
        Cell                     : QAccessible.Role = ... # 0x1d
        Link                     : QAccessible.Role = ... # 0x1e
        HelpBalloon              : QAccessible.Role = ... # 0x1f
        Assistant                : QAccessible.Role = ... # 0x20
        List                     : QAccessible.Role = ... # 0x21
        ListItem                 : QAccessible.Role = ... # 0x22
        Tree                     : QAccessible.Role = ... # 0x23
        TreeItem                 : QAccessible.Role = ... # 0x24
        PageTab                  : QAccessible.Role = ... # 0x25
        PropertyPage             : QAccessible.Role = ... # 0x26
        Indicator                : QAccessible.Role = ... # 0x27
        Graphic                  : QAccessible.Role = ... # 0x28
        StaticText               : QAccessible.Role = ... # 0x29
        EditableText             : QAccessible.Role = ... # 0x2a
        Button                   : QAccessible.Role = ... # 0x2b
        PushButton               : QAccessible.Role = ... # 0x2b
        CheckBox                 : QAccessible.Role = ... # 0x2c
        RadioButton              : QAccessible.Role = ... # 0x2d
        ComboBox                 : QAccessible.Role = ... # 0x2e
        ProgressBar              : QAccessible.Role = ... # 0x30
        Dial                     : QAccessible.Role = ... # 0x31
        HotkeyField              : QAccessible.Role = ... # 0x32
        Slider                   : QAccessible.Role = ... # 0x33
        SpinBox                  : QAccessible.Role = ... # 0x34
        Canvas                   : QAccessible.Role = ... # 0x35
        Animation                : QAccessible.Role = ... # 0x36
        Equation                 : QAccessible.Role = ... # 0x37
        ButtonDropDown           : QAccessible.Role = ... # 0x38
        ButtonMenu               : QAccessible.Role = ... # 0x39
        ButtonDropGrid           : QAccessible.Role = ... # 0x3a
        Whitespace               : QAccessible.Role = ... # 0x3b
        PageTabList              : QAccessible.Role = ... # 0x3c
        Clock                    : QAccessible.Role = ... # 0x3d
        Splitter                 : QAccessible.Role = ... # 0x3e
        LayeredPane              : QAccessible.Role = ... # 0x80
        Terminal                 : QAccessible.Role = ... # 0x81
        Desktop                  : QAccessible.Role = ... # 0x82
        Paragraph                : QAccessible.Role = ... # 0x83
        WebDocument              : QAccessible.Role = ... # 0x84
        Section                  : QAccessible.Role = ... # 0x85
        Notification             : QAccessible.Role = ... # 0x86
        ColorChooser             : QAccessible.Role = ... # 0x404
        Footer                   : QAccessible.Role = ... # 0x40e
        Form                     : QAccessible.Role = ... # 0x410
        Heading                  : QAccessible.Role = ... # 0x414
        Note                     : QAccessible.Role = ... # 0x41b
        ComplementaryContent     : QAccessible.Role = ... # 0x42c
        UserRole                 : QAccessible.Role = ... # 0xffff

    class State(Shiboken.Object):

        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, State: PySide6.QtGui.QAccessible.State) -> None: ...

        @staticmethod
        def __copy__() -> None: ...

    class Text(enum.Enum):

        Name                     : QAccessible.Text = ... # 0x0
        Description              : QAccessible.Text = ... # 0x1
        Value                    : QAccessible.Text = ... # 0x2
        Help                     : QAccessible.Text = ... # 0x3
        Accelerator              : QAccessible.Text = ... # 0x4
        DebugDescription         : QAccessible.Text = ... # 0x5
        UserText                 : QAccessible.Text = ... # 0xffff

    class TextBoundaryType(enum.Enum):

        CharBoundary             : QAccessible.TextBoundaryType = ... # 0x0
        WordBoundary             : QAccessible.TextBoundaryType = ... # 0x1
        SentenceBoundary         : QAccessible.TextBoundaryType = ... # 0x2
        ParagraphBoundary        : QAccessible.TextBoundaryType = ... # 0x3
        LineBoundary             : QAccessible.TextBoundaryType = ... # 0x4
        NoBoundary               : QAccessible.TextBoundaryType = ... # 0x5


    def __init__(self, QAccessible: PySide6.QtGui.QAccessible) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    @staticmethod
    def accessibleInterface(uniqueId: int) -> PySide6.QtGui.QAccessibleInterface: ...
    @staticmethod
    def cleanup() -> None: ...
    @staticmethod
    def deleteAccessibleInterface(uniqueId: int) -> None: ...
    @staticmethod
    def installFactory(arg__1: Callable) -> None: ...
    @staticmethod
    def isActive() -> bool: ...
    @staticmethod
    def qAccessibleTextBoundaryHelper(cursor: PySide6.QtGui.QTextCursor, boundaryType: PySide6.QtGui.QAccessible.TextBoundaryType) -> Tuple[int, int]: ...
    @staticmethod
    def queryAccessibleInterface(arg__1: PySide6.QtCore.QObject) -> PySide6.QtGui.QAccessibleInterface: ...
    @staticmethod
    def registerAccessibleInterface(iface: PySide6.QtGui.QAccessibleInterface) -> int: ...
    @staticmethod
    def setActive(active: bool) -> None: ...
    @staticmethod
    def setRootObject(object: PySide6.QtCore.QObject) -> None: ...
    @staticmethod
    def uniqueId(iface: PySide6.QtGui.QAccessibleInterface) -> int: ...
    @staticmethod
    def updateAccessibility(event: PySide6.QtGui.QAccessibleEvent) -> None: ...


class QAccessibleActionInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def actionNames(self) -> List[str]: ...
    @staticmethod
    def decreaseAction() -> str: ...
    def doAction(self, actionName: str) -> None: ...
    @staticmethod
    def increaseAction() -> str: ...
    def keyBindingsForAction(self, actionName: str) -> List[str]: ...
    def localizedActionDescription(self, name: str) -> str: ...
    def localizedActionName(self, name: str) -> str: ...
    @staticmethod
    def nextPageAction() -> str: ...
    @staticmethod
    def pressAction() -> str: ...
    @staticmethod
    def previousPageAction() -> str: ...
    @staticmethod
    def scrollDownAction() -> str: ...
    @staticmethod
    def scrollLeftAction() -> str: ...
    @staticmethod
    def scrollRightAction() -> str: ...
    @staticmethod
    def scrollUpAction() -> str: ...
    @staticmethod
    def setFocusAction() -> str: ...
    @staticmethod
    def showMenuAction() -> str: ...
    @staticmethod
    def toggleAction() -> str: ...


class QAccessibleEditableTextInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def deleteText(self, startOffset: int, endOffset: int) -> None: ...
    def insertText(self, offset: int, text: str) -> None: ...
    def replaceText(self, startOffset: int, endOffset: int, text: str) -> None: ...


class QAccessibleEvent(Shiboken.Object):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, typ: PySide6.QtGui.QAccessible.Event) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, typ: PySide6.QtGui.QAccessible.Event) -> None: ...

    def accessibleInterface(self) -> PySide6.QtGui.QAccessibleInterface: ...
    def child(self) -> int: ...
    def object(self) -> PySide6.QtCore.QObject: ...
    def setChild(self, chld: int) -> None: ...
    def type(self) -> PySide6.QtGui.QAccessible.Event: ...
    def uniqueId(self) -> int: ...


class QAccessibleInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def actionInterface(self) -> PySide6.QtGui.QAccessibleActionInterface: ...
    def backgroundColor(self) -> PySide6.QtGui.QColor: ...
    def child(self, index: int) -> PySide6.QtGui.QAccessibleInterface: ...
    def childAt(self, x: int, y: int) -> PySide6.QtGui.QAccessibleInterface: ...
    def childCount(self) -> int: ...
    def editableTextInterface(self) -> PySide6.QtGui.QAccessibleEditableTextInterface: ...
    def focusChild(self) -> PySide6.QtGui.QAccessibleInterface: ...
    def foregroundColor(self) -> PySide6.QtGui.QColor: ...
    def indexOfChild(self, arg__1: PySide6.QtGui.QAccessibleInterface) -> int: ...
    def interface_cast(self, arg__1: PySide6.QtGui.QAccessible.InterfaceType) -> int: ...
    def isValid(self) -> bool: ...
    def object(self) -> PySide6.QtCore.QObject: ...
    def parent(self) -> PySide6.QtGui.QAccessibleInterface: ...
    def rect(self) -> PySide6.QtCore.QRect: ...
    def relations(self, match: PySide6.QtGui.QAccessible.RelationFlag = ...) -> List[Tuple[PySide6.QtGui.QAccessibleInterface, PySide6.QtGui.QAccessible.RelationFlag]]: ...
    def role(self) -> PySide6.QtGui.QAccessible.Role: ...
    def selectionInterface(self) -> PySide6.QtGui.QAccessibleSelectionInterface: ...
    def setText(self, t: PySide6.QtGui.QAccessible.Text, text: str) -> None: ...
    def state(self) -> PySide6.QtGui.QAccessible.State: ...
    def tableCellInterface(self) -> PySide6.QtGui.QAccessibleTableCellInterface: ...
    def text(self, t: PySide6.QtGui.QAccessible.Text) -> str: ...
    def textInterface(self) -> PySide6.QtGui.QAccessibleTextInterface: ...
    def valueInterface(self) -> PySide6.QtGui.QAccessibleValueInterface: ...
    def virtual_hook(self, id: int, data: int) -> None: ...
    def window(self) -> PySide6.QtGui.QWindow: ...


class QAccessibleObject(PySide6.QtGui.QAccessibleInterface):

    def __init__(self, object: PySide6.QtCore.QObject) -> None: ...

    def childAt(self, x: int, y: int) -> PySide6.QtGui.QAccessibleInterface: ...
    def isValid(self) -> bool: ...
    def object(self) -> PySide6.QtCore.QObject: ...
    def rect(self) -> PySide6.QtCore.QRect: ...
    def setText(self, t: PySide6.QtGui.QAccessible.Text, text: str) -> None: ...


class QAccessibleSelectionInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def clear(self) -> bool: ...
    def isSelected(self, childItem: PySide6.QtGui.QAccessibleInterface) -> bool: ...
    def select(self, childItem: PySide6.QtGui.QAccessibleInterface) -> bool: ...
    def selectAll(self) -> bool: ...
    def selectedItem(self, selectionIndex: int) -> PySide6.QtGui.QAccessibleInterface: ...
    def selectedItemCount(self) -> int: ...
    def selectedItems(self) -> List[PySide6.QtGui.QAccessibleInterface]: ...
    def unselect(self, childItem: PySide6.QtGui.QAccessibleInterface) -> bool: ...


class QAccessibleStateChangeEvent(PySide6.QtGui.QAccessibleEvent):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, state: PySide6.QtGui.QAccessible.State) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, state: PySide6.QtGui.QAccessible.State) -> None: ...

    def changedStates(self) -> PySide6.QtGui.QAccessible.State: ...


class QAccessibleTableCellInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def columnExtent(self) -> int: ...
    def columnHeaderCells(self) -> List[PySide6.QtGui.QAccessibleInterface]: ...
    def columnIndex(self) -> int: ...
    def isSelected(self) -> bool: ...
    def rowExtent(self) -> int: ...
    def rowHeaderCells(self) -> List[PySide6.QtGui.QAccessibleInterface]: ...
    def rowIndex(self) -> int: ...
    def table(self) -> PySide6.QtGui.QAccessibleInterface: ...


class QAccessibleTableModelChangeEvent(PySide6.QtGui.QAccessibleEvent):

    class ModelChangeType(enum.Enum):

        ModelReset               : QAccessibleTableModelChangeEvent.ModelChangeType = ... # 0x0
        DataChanged              : QAccessibleTableModelChangeEvent.ModelChangeType = ... # 0x1
        RowsInserted             : QAccessibleTableModelChangeEvent.ModelChangeType = ... # 0x2
        ColumnsInserted          : QAccessibleTableModelChangeEvent.ModelChangeType = ... # 0x3
        RowsRemoved              : QAccessibleTableModelChangeEvent.ModelChangeType = ... # 0x4
        ColumnsRemoved           : QAccessibleTableModelChangeEvent.ModelChangeType = ... # 0x5


    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, changeType: PySide6.QtGui.QAccessibleTableModelChangeEvent.ModelChangeType) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, changeType: PySide6.QtGui.QAccessibleTableModelChangeEvent.ModelChangeType) -> None: ...

    def firstColumn(self) -> int: ...
    def firstRow(self) -> int: ...
    def lastColumn(self) -> int: ...
    def lastRow(self) -> int: ...
    def modelChangeType(self) -> PySide6.QtGui.QAccessibleTableModelChangeEvent.ModelChangeType: ...
    def setFirstColumn(self, col: int) -> None: ...
    def setFirstRow(self, row: int) -> None: ...
    def setLastColumn(self, col: int) -> None: ...
    def setLastRow(self, row: int) -> None: ...
    def setModelChangeType(self, changeType: PySide6.QtGui.QAccessibleTableModelChangeEvent.ModelChangeType) -> None: ...


class QAccessibleTextCursorEvent(PySide6.QtGui.QAccessibleEvent):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, cursorPos: int) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, cursorPos: int) -> None: ...

    def cursorPosition(self) -> int: ...
    def setCursorPosition(self, position: int) -> None: ...


class QAccessibleTextInsertEvent(PySide6.QtGui.QAccessibleTextCursorEvent):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, position: int, text: str) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, position: int, text: str) -> None: ...

    def changePosition(self) -> int: ...
    def textInserted(self) -> str: ...


class QAccessibleTextInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def addSelection(self, startOffset: int, endOffset: int) -> None: ...
    def attributes(self, offset: int) -> Tuple[str, int, int]: ...
    def characterCount(self) -> int: ...
    def characterRect(self, offset: int) -> PySide6.QtCore.QRect: ...
    def cursorPosition(self) -> int: ...
    def offsetAtPoint(self, point: PySide6.QtCore.QPoint) -> int: ...
    def removeSelection(self, selectionIndex: int) -> None: ...
    def scrollToSubstring(self, startIndex: int, endIndex: int) -> None: ...
    def selection(self, selectionIndex: int) -> Tuple[int, int]: ...
    def selectionCount(self) -> int: ...
    def setCursorPosition(self, position: int) -> None: ...
    def setSelection(self, selectionIndex: int, startOffset: int, endOffset: int) -> None: ...
    def text(self, startOffset: int, endOffset: int) -> str: ...
    def textAfterOffset(self, offset: int, boundaryType: PySide6.QtGui.QAccessible.TextBoundaryType) -> Tuple[str, int, int]: ...
    def textAtOffset(self, offset: int, boundaryType: PySide6.QtGui.QAccessible.TextBoundaryType) -> Tuple[str, int, int]: ...
    def textBeforeOffset(self, offset: int, boundaryType: PySide6.QtGui.QAccessible.TextBoundaryType) -> Tuple[str, int, int]: ...


class QAccessibleTextRemoveEvent(PySide6.QtGui.QAccessibleTextCursorEvent):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, position: int, text: str) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, position: int, text: str) -> None: ...

    def changePosition(self) -> int: ...
    def textRemoved(self) -> str: ...


class QAccessibleTextSelectionEvent(PySide6.QtGui.QAccessibleTextCursorEvent):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, start: int, end: int) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, start: int, end: int) -> None: ...

    def selectionEnd(self) -> int: ...
    def selectionStart(self) -> int: ...
    def setSelection(self, start: int, end: int) -> None: ...


class QAccessibleTextUpdateEvent(PySide6.QtGui.QAccessibleTextCursorEvent):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, position: int, oldText: str, text: str) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, position: int, oldText: str, text: str) -> None: ...

    def changePosition(self) -> int: ...
    def textInserted(self) -> str: ...
    def textRemoved(self) -> str: ...


class QAccessibleValueChangeEvent(PySide6.QtGui.QAccessibleEvent):

    @overload
    def __init__(self, iface: PySide6.QtGui.QAccessibleInterface, val: Any) -> None: ...
    @overload
    def __init__(self, obj: PySide6.QtCore.QObject, val: Any) -> None: ...

    def setValue(self, val: Any) -> None: ...
    def value(self) -> Any: ...


class QAccessibleValueInterface(Shiboken.Object):

    def __init__(self) -> None: ...

    def currentValue(self) -> Any: ...
    def maximumValue(self) -> Any: ...
    def minimumStepSize(self) -> Any: ...
    def minimumValue(self) -> Any: ...
    def setCurrentValue(self, value: Any) -> None: ...


class QAction(PySide6.QtCore.QObject):

    changed                  : ClassVar[Signal] = ... # changed()
    checkableChanged         : ClassVar[Signal] = ... # checkableChanged(bool)
    enabledChanged           : ClassVar[Signal] = ... # enabledChanged(bool)
    hovered                  : ClassVar[Signal] = ... # hovered()
    toggled                  : ClassVar[Signal] = ... # toggled(bool)
    triggered                : ClassVar[Signal] = ... # triggered(); triggered(bool)
    visibleChanged           : ClassVar[Signal] = ... # visibleChanged()

    class ActionEvent(enum.Enum):

        Trigger                  : QAction.ActionEvent = ... # 0x0
        Hover                    : QAction.ActionEvent = ... # 0x1

    class MenuRole(enum.Enum):

        NoRole                   : QAction.MenuRole = ... # 0x0
        TextHeuristicRole        : QAction.MenuRole = ... # 0x1
        ApplicationSpecificRole  : QAction.MenuRole = ... # 0x2
        AboutQtRole              : QAction.MenuRole = ... # 0x3
        AboutRole                : QAction.MenuRole = ... # 0x4
        PreferencesRole          : QAction.MenuRole = ... # 0x5
        QuitRole                 : QAction.MenuRole = ... # 0x6

    class Priority(enum.Enum):

        LowPriority              : QAction.Priority = ... # 0x0
        NormalPriority           : QAction.Priority = ... # 0x80
        HighPriority             : QAction.Priority = ... # 0x100


    @overload
    def __init__(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, text: str, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def actionGroup(self) -> PySide6.QtGui.QActionGroup: ...
    def activate(self, event: PySide6.QtGui.QAction.ActionEvent) -> None: ...
    def associatedObjects(self) -> List[PySide6.QtCore.QObject]: ...
    def autoRepeat(self) -> bool: ...
    def data(self) -> Any: ...
    def event(self, arg__1: PySide6.QtCore.QEvent) -> bool: ...
    def font(self) -> PySide6.QtGui.QFont: ...
    def hover(self) -> None: ...
    def icon(self) -> PySide6.QtGui.QIcon: ...
    def iconText(self) -> str: ...
    def isCheckable(self) -> bool: ...
    def isChecked(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isIconVisibleInMenu(self) -> bool: ...
    def isSeparator(self) -> bool: ...
    def isShortcutVisibleInContextMenu(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def menu(self) -> PySide6.QtCore.QObject: ...
    def menuRole(self) -> PySide6.QtGui.QAction.MenuRole: ...
    def priority(self) -> PySide6.QtGui.QAction.Priority: ...
    def resetEnabled(self) -> None: ...
    def setActionGroup(self, group: PySide6.QtGui.QActionGroup) -> None: ...
    def setAutoRepeat(self, arg__1: bool) -> None: ...
    def setCheckable(self, arg__1: bool) -> None: ...
    def setChecked(self, arg__1: bool) -> None: ...
    def setData(self, var: Any) -> None: ...
    def setDisabled(self, b: bool) -> None: ...
    def setEnabled(self, arg__1: bool) -> None: ...
    def setFont(self, font: Union[PySide6.QtGui.QFont, str, Sequence[str]]) -> None: ...
    def setIcon(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap]) -> None: ...
    def setIconText(self, text: str) -> None: ...
    def setIconVisibleInMenu(self, visible: bool) -> None: ...
    def setMenu(self, arg__1: PySide6.QtCore.QObject) -> None: ...
    def setMenuRole(self, menuRole: PySide6.QtGui.QAction.MenuRole) -> None: ...
    def setPriority(self, priority: PySide6.QtGui.QAction.Priority) -> None: ...
    def setSeparator(self, b: bool) -> None: ...
    @overload
    def setShortcut(self, arg__1: PySide6.QtCore.Qt.Key) -> None: ...
    @overload
    def setShortcut(self, shortcut: Union[PySide6.QtGui.QKeySequence, PySide6.QtCore.QKeyCombination, PySide6.QtGui.QKeySequence.StandardKey, str, int]) -> None: ...
    def setShortcutContext(self, context: PySide6.QtCore.Qt.ShortcutContext) -> None: ...
    def setShortcutVisibleInContextMenu(self, show: bool) -> None: ...
    @overload
    def setShortcuts(self, arg__1: PySide6.QtGui.QKeySequence.StandardKey) -> None: ...
    @overload
    def setShortcuts(self, shortcuts: Sequence[PySide6.QtGui.QKeySequence]) -> None: ...
    def setStatusTip(self, statusTip: str) -> None: ...
    def setText(self, text: str) -> None: ...
    def setToolTip(self, tip: str) -> None: ...
    def setVisible(self, arg__1: bool) -> None: ...
    def setWhatsThis(self, what: str) -> None: ...
    def shortcut(self) -> PySide6.QtGui.QKeySequence: ...
    def shortcutContext(self) -> PySide6.QtCore.Qt.ShortcutContext: ...
    def shortcuts(self) -> List[PySide6.QtGui.QKeySequence]: ...
    def showStatusText(self, object: Optional[PySide6.QtCore.QObject] = ...) -> bool: ...
    def statusTip(self) -> str: ...
    def text(self) -> str: ...
    def toggle(self) -> None: ...
    def toolTip(self) -> str: ...
    def trigger(self) -> None: ...
    def whatsThis(self) -> str: ...


class QActionEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QActionEvent) -> None: ...
    @overload
    def __init__(self, type: int, action: PySide6.QtGui.QAction, before: Optional[PySide6.QtGui.QAction] = ...) -> None: ...

    def action(self) -> PySide6.QtGui.QAction: ...
    def before(self) -> PySide6.QtGui.QAction: ...
    def clone(self) -> PySide6.QtGui.QActionEvent: ...


class QActionGroup(PySide6.QtCore.QObject):

    hovered                  : ClassVar[Signal] = ... # hovered(QAction*)
    triggered                : ClassVar[Signal] = ... # triggered(QAction*)

    class ExclusionPolicy(enum.Enum):

        None_                    : QActionGroup.ExclusionPolicy = ... # 0x0
        Exclusive                : QActionGroup.ExclusionPolicy = ... # 0x1
        ExclusiveOptional        : QActionGroup.ExclusionPolicy = ... # 0x2


    def __init__(self, parent: PySide6.QtCore.QObject) -> None: ...

    def actions(self) -> List[PySide6.QtGui.QAction]: ...
    @overload
    def addAction(self, a: PySide6.QtGui.QAction) -> PySide6.QtGui.QAction: ...
    @overload
    def addAction(self, icon: Union[PySide6.QtGui.QIcon, PySide6.QtGui.QPixmap], text: str) -> PySide6.QtGui.QAction: ...
    @overload
    def addAction(self, text: str) -> PySide6.QtGui.QAction: ...
    def checkedAction(self) -> PySide6.QtGui.QAction: ...
    def exclusionPolicy(self) -> PySide6.QtGui.QActionGroup.ExclusionPolicy: ...
    def isEnabled(self) -> bool: ...
    def isExclusive(self) -> bool: ...
    def isVisible(self) -> bool: ...
    def removeAction(self, a: PySide6.QtGui.QAction) -> None: ...
    def setDisabled(self, b: bool) -> None: ...
    def setEnabled(self, arg__1: bool) -> None: ...
    def setExclusionPolicy(self, policy: PySide6.QtGui.QActionGroup.ExclusionPolicy) -> None: ...
    def setExclusive(self, arg__1: bool) -> None: ...
    def setVisible(self, arg__1: bool) -> None: ...


class QBackingStore(Shiboken.Object):

    def __init__(self, window: PySide6.QtGui.QWindow) -> None: ...

    def beginPaint(self, arg__1: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect]) -> None: ...
    def endPaint(self) -> None: ...
    def flush(self, region: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect], window: Optional[PySide6.QtGui.QWindow] = ..., offset: PySide6.QtCore.QPoint = ...) -> None: ...
    def hasStaticContents(self) -> bool: ...
    def paintDevice(self) -> PySide6.QtGui.QPaintDevice: ...
    def resize(self, size: PySide6.QtCore.QSize) -> None: ...
    def scroll(self, area: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect], dx: int, dy: int) -> bool: ...
    def setStaticContents(self, region: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect]) -> None: ...
    def size(self) -> PySide6.QtCore.QSize: ...
    def staticContents(self) -> PySide6.QtGui.QRegion: ...
    def window(self) -> PySide6.QtGui.QWindow: ...


class QBitmap(PySide6.QtGui.QPixmap):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QBitmap: Union[PySide6.QtGui.QBitmap, str]) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtCore.QSize) -> None: ...
    @overload
    def __init__(self, arg__1: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage]) -> None: ...
    @overload
    def __init__(self, fileName: str, format: Union[bytes, bytearray, memoryview, NoneType] = ...) -> None: ...
    @overload
    def __init__(self, w: int, h: int) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def clear(self) -> None: ...
    @staticmethod
    def fromData(size: PySide6.QtCore.QSize, bits: Union[bytes, bytearray, memoryview], monoFormat: PySide6.QtGui.QImage.Format = ...) -> PySide6.QtGui.QBitmap: ...
    @staticmethod
    def fromImage(image: PySide6.QtGui.QImage, flags: PySide6.QtCore.Qt.ImageConversionFlag = ...) -> PySide6.QtGui.QBitmap: ...
    @staticmethod
    def fromPixmap(pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage]) -> PySide6.QtGui.QBitmap: ...
    def swap(self, other: Union[PySide6.QtGui.QBitmap, str]) -> None: ...
    def transformed(self, matrix: PySide6.QtGui.QTransform) -> PySide6.QtGui.QBitmap: ...


class QBrush(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, brush: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap]) -> None: ...
    @overload
    def __init__(self, bs: PySide6.QtCore.Qt.BrushStyle) -> None: ...
    @overload
    def __init__(self, color: PySide6.QtCore.Qt.GlobalColor, bs: PySide6.QtCore.Qt.BrushStyle = ...) -> None: ...
    @overload
    def __init__(self, color: PySide6.QtCore.Qt.GlobalColor, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage]) -> None: ...
    @overload
    def __init__(self, color: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int], bs: PySide6.QtCore.Qt.BrushStyle = ...) -> None: ...
    @overload
    def __init__(self, color: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int], pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage]) -> None: ...
    @overload
    def __init__(self, gradient: Union[PySide6.QtGui.QGradient, PySide6.QtGui.QGradient.Preset]) -> None: ...
    @overload
    def __init__(self, image: PySide6.QtGui.QImage) -> None: ...
    @overload
    def __init__(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage]) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def color(self) -> PySide6.QtGui.QColor: ...
    def gradient(self) -> PySide6.QtGui.QGradient: ...
    def isOpaque(self) -> bool: ...
    @overload
    def setColor(self, color: PySide6.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def setColor(self, color: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int]) -> None: ...
    def setStyle(self, arg__1: PySide6.QtCore.Qt.BrushStyle) -> None: ...
    def setTexture(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage]) -> None: ...
    def setTextureImage(self, image: PySide6.QtGui.QImage) -> None: ...
    def setTransform(self, arg__1: PySide6.QtGui.QTransform) -> None: ...
    def style(self) -> PySide6.QtCore.Qt.BrushStyle: ...
    def swap(self, other: Union[PySide6.QtGui.QBrush, PySide6.QtCore.Qt.BrushStyle, PySide6.QtCore.Qt.GlobalColor, PySide6.QtGui.QColor, PySide6.QtGui.QGradient, PySide6.QtGui.QImage, PySide6.QtGui.QPixmap]) -> None: ...
    def texture(self) -> PySide6.QtGui.QPixmap: ...
    def textureImage(self) -> PySide6.QtGui.QImage: ...
    def transform(self) -> PySide6.QtGui.QTransform: ...


class QChildWindowEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QChildWindowEvent) -> None: ...
    @overload
    def __init__(self, type: PySide6.QtCore.QEvent.Type, childWindow: PySide6.QtGui.QWindow) -> None: ...

    def child(self) -> PySide6.QtGui.QWindow: ...
    def clone(self) -> PySide6.QtGui.QChildWindowEvent: ...


class QClipboard(PySide6.QtCore.QObject):

    changed                  : ClassVar[Signal] = ... # changed(QClipboard::Mode)
    dataChanged              : ClassVar[Signal] = ... # dataChanged()
    findBufferChanged        : ClassVar[Signal] = ... # findBufferChanged()
    selectionChanged         : ClassVar[Signal] = ... # selectionChanged()

    class Mode(enum.Enum):

        Clipboard                : QClipboard.Mode = ... # 0x0
        Selection                : QClipboard.Mode = ... # 0x1
        FindBuffer               : QClipboard.Mode = ... # 0x2
        LastMode                 : QClipboard.Mode = ... # 0x2


    def clear(self, mode: PySide6.QtGui.QClipboard.Mode = ...) -> None: ...
    def image(self, mode: PySide6.QtGui.QClipboard.Mode = ...) -> PySide6.QtGui.QImage: ...
    def mimeData(self, mode: PySide6.QtGui.QClipboard.Mode = ...) -> PySide6.QtCore.QMimeData: ...
    def ownsClipboard(self) -> bool: ...
    def ownsFindBuffer(self) -> bool: ...
    def ownsSelection(self) -> bool: ...
    def pixmap(self, mode: PySide6.QtGui.QClipboard.Mode = ...) -> PySide6.QtGui.QPixmap: ...
    @overload
    def setImage(self, arg__1: PySide6.QtGui.QImage, mode: PySide6.QtGui.QClipboard.Mode = ...) -> None: ...
    @overload
    def setImage(self, path: Union[str, bytes, os.PathLike[str]]) -> None: ...
    def setMimeData(self, data: PySide6.QtCore.QMimeData, mode: PySide6.QtGui.QClipboard.Mode = ...) -> None: ...
    @overload
    def setPixmap(self, arg__1: PySide6.QtGui.QPixmap, mode: PySide6.QtGui.QClipboard.Mode = ...) -> None: ...
    @overload
    def setPixmap(self, path: Union[str, bytes, os.PathLike[str]]) -> None: ...
    def setText(self, arg__1: str, mode: PySide6.QtGui.QClipboard.Mode = ...) -> None: ...
    def supportsFindBuffer(self) -> bool: ...
    def supportsSelection(self) -> bool: ...
    @overload
    def text(self, mode: PySide6.QtGui.QClipboard.Mode = ...) -> str: ...
    @overload
    def text(self, subtype: str, mode: PySide6.QtGui.QClipboard.Mode = ...) -> Tuple[str, PySide6.QtGui.QClipboard.Mode]: ...


class QCloseEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtGui.QCloseEvent) -> None: ...

    def clone(self) -> PySide6.QtGui.QCloseEvent: ...


class QColor(Shiboken.Object):

    class NameFormat(enum.Enum):

        HexRgb                   : QColor.NameFormat = ... # 0x0
        HexArgb                  : QColor.NameFormat = ... # 0x1

    class Spec(enum.Enum):

        Invalid                  : QColor.Spec = ... # 0x0
        Rgb                      : QColor.Spec = ... # 0x1
        Hsv                      : QColor.Spec = ... # 0x2
        Cmyk                     : QColor.Spec = ... # 0x3
        Hsl                      : QColor.Spec = ... # 0x4
        ExtendedRgb              : QColor.Spec = ... # 0x5


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QColor: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int]) -> None: ...
    @overload
    def __init__(self, arg__1: Any) -> None: ...
    @overload
    def __init__(self, color: PySide6.QtCore.Qt.GlobalColor) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, name: str) -> None: ...
    @overload
    def __init__(self, r: int, g: int, b: int, a: int = ...) -> None: ...
    @overload
    def __init__(self, rgb: int) -> None: ...
    @overload
    def __init__(self, rgba64: PySide6.QtGui.QRgba64) -> None: ...
    @overload
    def __init__(self, spec: PySide6.QtGui.QColor.Spec, a1: int, a2: int, a3: int, a4: int, a5: int = ...) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def __reduce__(self) -> object: ...
    def __repr__(self) -> object: ...
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def __setstate__(self, arg__1: object) -> object: ...
    def __str__(self) -> object: ...
    def alpha(self) -> int: ...
    def alphaF(self) -> float: ...
    def black(self) -> int: ...
    def blackF(self) -> float: ...
    def blue(self) -> int: ...
    def blueF(self) -> float: ...
    @staticmethod
    def colorNames() -> List[str]: ...
    def convertTo(self, colorSpec: PySide6.QtGui.QColor.Spec) -> PySide6.QtGui.QColor: ...
    def cyan(self) -> int: ...
    def cyanF(self) -> float: ...
    def darker(self, f: int = ...) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromCmyk(c: int, m: int, y: int, k: int, a: int = ...) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromCmykF(c: float, m: float, y: float, k: float, a: float = ...) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromHsl(h: int, s: int, l: int, a: int = ...) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromHslF(h: float, s: float, l: float, a: float = ...) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromHsv(h: int, s: int, v: int, a: int = ...) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromHsvF(h: float, s: float, v: float, a: float = ...) -> PySide6.QtGui.QColor: ...
    @overload
    @staticmethod
    def fromRgb(r: int, g: int, b: int, a: int = ...) -> PySide6.QtGui.QColor: ...
    @overload
    @staticmethod
    def fromRgb(rgb: int) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromRgbF(r: float, g: float, b: float, a: float = ...) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromRgba(rgba: int) -> PySide6.QtGui.QColor: ...
    @overload
    @staticmethod
    def fromRgba64(r: int, g: int, b: int, a: int = ...) -> PySide6.QtGui.QColor: ...
    @overload
    @staticmethod
    def fromRgba64(rgba: PySide6.QtGui.QRgba64) -> PySide6.QtGui.QColor: ...
    @staticmethod
    def fromString(name: str) -> PySide6.QtGui.QColor: ...
    def getCmyk(self) -> object: ...
    def getCmykF(self) -> object: ...
    def getHsl(self) -> object: ...
    def getHslF(self) -> object: ...
    def getHsv(self) -> object: ...
    def getHsvF(self) -> object: ...
    def getRgb(self) -> object: ...
    def getRgbF(self) -> object: ...
    def green(self) -> int: ...
    def greenF(self) -> float: ...
    def hslHue(self) -> int: ...
    def hslHueF(self) -> float: ...
    def hslSaturation(self) -> int: ...
    def hslSaturationF(self) -> float: ...
    def hsvHue(self) -> int: ...
    def hsvHueF(self) -> float: ...
    def hsvSaturation(self) -> int: ...
    def hsvSaturationF(self) -> float: ...
    def hue(self) -> int: ...
    def hueF(self) -> float: ...
    def isValid(self) -> bool: ...
    @overload
    @staticmethod
    def isValidColor(arg__1: str) -> bool: ...
    @overload
    @staticmethod
    def isValidColor(arg__1: str) -> bool: ...
    @overload
    @staticmethod
    def isValidColor(name: str) -> bool: ...
    @staticmethod
    def isValidColorName(arg__1: str) -> bool: ...
    def lighter(self, f: int = ...) -> PySide6.QtGui.QColor: ...
    def lightness(self) -> int: ...
    def lightnessF(self) -> float: ...
    def magenta(self) -> int: ...
    def magentaF(self) -> float: ...
    def name(self, format: PySide6.QtGui.QColor.NameFormat = ...) -> str: ...
    def red(self) -> int: ...
    def redF(self) -> float: ...
    def rgb(self) -> int: ...
    def rgba(self) -> int: ...
    def rgba64(self) -> PySide6.QtGui.QRgba64: ...
    def saturation(self) -> int: ...
    def saturationF(self) -> float: ...
    def setAlpha(self, alpha: int) -> None: ...
    def setAlphaF(self, alpha: float) -> None: ...
    def setBlue(self, blue: int) -> None: ...
    def setBlueF(self, blue: float) -> None: ...
    def setCmyk(self, c: int, m: int, y: int, k: int, a: int = ...) -> None: ...
    def setCmykF(self, c: float, m: float, y: float, k: float, a: float = ...) -> None: ...
    def setGreen(self, green: int) -> None: ...
    def setGreenF(self, green: float) -> None: ...
    def setHsl(self, h: int, s: int, l: int, a: int = ...) -> None: ...
    def setHslF(self, h: float, s: float, l: float, a: float = ...) -> None: ...
    def setHsv(self, h: int, s: int, v: int, a: int = ...) -> None: ...
    def setHsvF(self, h: float, s: float, v: float, a: float = ...) -> None: ...
    @overload
    def setNamedColor(self, name: str) -> None: ...
    @overload
    def setNamedColor(self, name: str) -> None: ...
    def setRed(self, red: int) -> None: ...
    def setRedF(self, red: float) -> None: ...
    @overload
    def setRgb(self, r: int, g: int, b: int, a: int = ...) -> None: ...
    @overload
    def setRgb(self, rgb: int) -> None: ...
    def setRgbF(self, r: float, g: float, b: float, a: float = ...) -> None: ...
    def setRgba(self, rgba: int) -> None: ...
    def setRgba64(self, rgba: PySide6.QtGui.QRgba64) -> None: ...
    def spec(self) -> PySide6.QtGui.QColor.Spec: ...
    def toCmyk(self) -> PySide6.QtGui.QColor: ...
    def toExtendedRgb(self) -> PySide6.QtGui.QColor: ...
    def toHsl(self) -> PySide6.QtGui.QColor: ...
    def toHsv(self) -> PySide6.QtGui.QColor: ...
    def toRgb(self) -> PySide6.QtGui.QColor: ...
    def toTuple(self) -> object: ...
    def value(self) -> int: ...
    def valueF(self) -> float: ...
    def yellow(self) -> int: ...
    def yellowF(self) -> float: ...


class QColorConstants(Shiboken.Object):

    Black                     = ...  # type: QColor
    Blue                      = ...  # type: QColor
    Color0                    = ...  # type: QColor
    Color1                    = ...  # type: QColor
    Cyan                      = ...  # type: QColor
    DarkBlue                  = ...  # type: QColor
    DarkCyan                  = ...  # type: QColor
    DarkGray                  = ...  # type: QColor
    DarkGreen                 = ...  # type: QColor
    DarkMagenta               = ...  # type: QColor
    DarkRed                   = ...  # type: QColor
    DarkYellow                = ...  # type: QColor
    Gray                      = ...  # type: QColor
    Green                     = ...  # type: QColor
    LightGray                 = ...  # type: QColor
    Magenta                   = ...  # type: QColor
    Red                       = ...  # type: QColor
    Transparent               = ...  # type: QColor
    White                     = ...  # type: QColor
    Yellow                    = ...  # type: QColor

    class Svg(Shiboken.Object):

        aliceblue                 = ...  # type: QColor
        antiquewhite              = ...  # type: QColor
        aqua                      = ...  # type: QColor
        aquamarine                = ...  # type: QColor
        azure                     = ...  # type: QColor
        beige                     = ...  # type: QColor
        bisque                    = ...  # type: QColor
        black                     = ...  # type: QColor
        blanchedalmond            = ...  # type: QColor
        blue                      = ...  # type: QColor
        blueviolet                = ...  # type: QColor
        brown                     = ...  # type: QColor
        burlywood                 = ...  # type: QColor
        cadetblue                 = ...  # type: QColor
        chartreuse                = ...  # type: QColor
        chocolate                 = ...  # type: QColor
        coral                     = ...  # type: QColor
        cornflowerblue            = ...  # type: QColor
        cornsilk                  = ...  # type: QColor
        crimson                   = ...  # type: QColor
        cyan                      = ...  # type: QColor
        darkblue                  = ...  # type: QColor
        darkcyan                  = ...  # type: QColor
        darkgoldenrod             = ...  # type: QColor
        darkgray                  = ...  # type: QColor
        darkgreen                 = ...  # type: QColor
        darkgrey                  = ...  # type: QColor
        darkkhaki                 = ...  # type: QColor
        darkmagenta               = ...  # type: QColor
        darkolivegreen            = ...  # type: QColor
        darkorange                = ...  # type: QColor
        darkorchid                = ...  # type: QColor
        darkred                   = ...  # type: QColor
        darksalmon                = ...  # type: QColor
        darkseagreen              = ...  # type: QColor
        darkslateblue             = ...  # type: QColor
        darkslategray             = ...  # type: QColor
        darkslategrey             = ...  # type: QColor
        darkturquoise             = ...  # type: QColor
        darkviolet                = ...  # type: QColor
        deeppink                  = ...  # type: QColor
        deepskyblue               = ...  # type: QColor
        dimgray                   = ...  # type: QColor
        dimgrey                   = ...  # type: QColor
        dodgerblue                = ...  # type: QColor
        firebrick                 = ...  # type: QColor
        floralwhite               = ...  # type: QColor
        forestgreen               = ...  # type: QColor
        fuchsia                   = ...  # type: QColor
        gainsboro                 = ...  # type: QColor
        ghostwhite                = ...  # type: QColor
        gold                      = ...  # type: QColor
        goldenrod                 = ...  # type: QColor
        gray                      = ...  # type: QColor
        green                     = ...  # type: QColor
        greenyellow               = ...  # type: QColor
        grey                      = ...  # type: QColor
        honeydew                  = ...  # type: QColor
        hotpink                   = ...  # type: QColor
        indianred                 = ...  # type: QColor
        indigo                    = ...  # type: QColor
        ivory                     = ...  # type: QColor
        khaki                     = ...  # type: QColor
        lavender                  = ...  # type: QColor
        lavenderblush             = ...  # type: QColor
        lawngreen                 = ...  # type: QColor
        lemonchiffon              = ...  # type: QColor
        lightblue                 = ...  # type: QColor
        lightcoral                = ...  # type: QColor
        lightcyan                 = ...  # type: QColor
        lightgoldenrodyellow      = ...  # type: QColor
        lightgray                 = ...  # type: QColor
        lightgreen                = ...  # type: QColor
        lightgrey                 = ...  # type: QColor
        lightpink                 = ...  # type: QColor
        lightsalmon               = ...  # type: QColor
        lightseagreen             = ...  # type: QColor
        lightskyblue              = ...  # type: QColor
        lightslategray            = ...  # type: QColor
        lightslategrey            = ...  # type: QColor
        lightsteelblue            = ...  # type: QColor
        lightyellow               = ...  # type: QColor
        lime                      = ...  # type: QColor
        limegreen                 = ...  # type: QColor
        linen                     = ...  # type: QColor
        magenta                   = ...  # type: QColor
        maroon                    = ...  # type: QColor
        mediumaquamarine          = ...  # type: QColor
        mediumblue                = ...  # type: QColor
        mediumorchid              = ...  # type: QColor
        mediumpurple              = ...  # type: QColor
        mediumseagreen            = ...  # type: QColor
        mediumslateblue           = ...  # type: QColor
        mediumspringgreen         = ...  # type: QColor
        mediumturquoise           = ...  # type: QColor
        mediumvioletred           = ...  # type: QColor
        midnightblue              = ...  # type: QColor
        mintcream                 = ...  # type: QColor
        mistyrose                 = ...  # type: QColor
        moccasin                  = ...  # type: QColor
        navajowhite               = ...  # type: QColor
        navy                      = ...  # type: QColor
        oldlace                   = ...  # type: QColor
        olive                     = ...  # type: QColor
        olivedrab                 = ...  # type: QColor
        orange                    = ...  # type: QColor
        orangered                 = ...  # type: QColor
        orchid                    = ...  # type: QColor
        palegoldenrod             = ...  # type: QColor
        palegreen                 = ...  # type: QColor
        paleturquoise             = ...  # type: QColor
        palevioletred             = ...  # type: QColor
        papayawhip                = ...  # type: QColor
        peachpuff                 = ...  # type: QColor
        peru                      = ...  # type: QColor
        pink                      = ...  # type: QColor
        plum                      = ...  # type: QColor
        powderblue                = ...  # type: QColor
        purple                    = ...  # type: QColor
        red                       = ...  # type: QColor
        rosybrown                 = ...  # type: QColor
        royalblue                 = ...  # type: QColor
        saddlebrown               = ...  # type: QColor
        salmon                    = ...  # type: QColor
        sandybrown                = ...  # type: QColor
        seagreen                  = ...  # type: QColor
        seashell                  = ...  # type: QColor
        sienna                    = ...  # type: QColor
        silver                    = ...  # type: QColor
        skyblue                   = ...  # type: QColor
        slateblue                 = ...  # type: QColor
        slategray                 = ...  # type: QColor
        slategrey                 = ...  # type: QColor
        snow                      = ...  # type: QColor
        springgreen               = ...  # type: QColor
        steelblue                 = ...  # type: QColor
        tan                       = ...  # type: QColor
        teal                      = ...  # type: QColor
        thistle                   = ...  # type: QColor
        tomato                    = ...  # type: QColor
        turquoise                 = ...  # type: QColor
        violet                    = ...  # type: QColor
        wheat                     = ...  # type: QColor
        white                     = ...  # type: QColor
        whitesmoke                = ...  # type: QColor
        yellow                    = ...  # type: QColor
        yellowgreen               = ...  # type: QColor


class QColorSpace(Shiboken.Object):

    class NamedColorSpace(enum.Enum):

        SRgb                     : QColorSpace.NamedColorSpace = ... # 0x1
        SRgbLinear               : QColorSpace.NamedColorSpace = ... # 0x2
        AdobeRgb                 : QColorSpace.NamedColorSpace = ... # 0x3
        DisplayP3                : QColorSpace.NamedColorSpace = ... # 0x4
        ProPhotoRgb              : QColorSpace.NamedColorSpace = ... # 0x5

    class Primaries(enum.Enum):

        Custom                   : QColorSpace.Primaries = ... # 0x0
        SRgb                     : QColorSpace.Primaries = ... # 0x1
        AdobeRgb                 : QColorSpace.Primaries = ... # 0x2
        DciP3D65                 : QColorSpace.Primaries = ... # 0x3
        ProPhotoRgb              : QColorSpace.Primaries = ... # 0x4

    class TransferFunction(enum.Enum):

        Custom                   : QColorSpace.TransferFunction = ... # 0x0
        Linear                   : QColorSpace.TransferFunction = ... # 0x1
        Gamma                    : QColorSpace.TransferFunction = ... # 0x2
        SRgb                     : QColorSpace.TransferFunction = ... # 0x3
        ProPhotoRgb              : QColorSpace.TransferFunction = ... # 0x4


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, colorSpace: Union[PySide6.QtGui.QColorSpace, PySide6.QtGui.QColorSpace.NamedColorSpace]) -> None: ...
    @overload
    def __init__(self, namedColorSpace: PySide6.QtGui.QColorSpace.NamedColorSpace) -> None: ...
    @overload
    def __init__(self, primaries: PySide6.QtGui.QColorSpace.Primaries, gamma: float) -> None: ...
    @overload
    def __init__(self, primaries: PySide6.QtGui.QColorSpace.Primaries, transferFunction: PySide6.QtGui.QColorSpace.TransferFunction, gamma: float = ...) -> None: ...
    @overload
    def __init__(self, primaries: PySide6.QtGui.QColorSpace.Primaries, transferFunctionTable: Sequence[int]) -> None: ...
    @overload
    def __init__(self, whitePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], greenPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], bluePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redTransferFunctionTable: Sequence[int], greenTransferFunctionTable: Sequence[int], blueTransferFunctionTable: Sequence[int]) -> None: ...
    @overload
    def __init__(self, whitePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], greenPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], bluePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], transferFunction: PySide6.QtGui.QColorSpace.TransferFunction, gamma: float = ...) -> None: ...
    @overload
    def __init__(self, whitePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], greenPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], bluePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], transferFunctionTable: Sequence[int]) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def __lshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, arg__1: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def description(self) -> str: ...
    @staticmethod
    def fromIccProfile(iccProfile: Union[PySide6.QtCore.QByteArray, bytes, bytearray, memoryview]) -> PySide6.QtGui.QColorSpace: ...
    def gamma(self) -> float: ...
    def iccProfile(self) -> PySide6.QtCore.QByteArray: ...
    def isValid(self) -> bool: ...
    def primaries(self) -> PySide6.QtGui.QColorSpace.Primaries: ...
    def setDescription(self, description: str) -> None: ...
    @overload
    def setPrimaries(self, primariesId: PySide6.QtGui.QColorSpace.Primaries) -> None: ...
    @overload
    def setPrimaries(self, whitePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], redPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], greenPoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], bluePoint: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> None: ...
    @overload
    def setTransferFunction(self, transferFunction: PySide6.QtGui.QColorSpace.TransferFunction, gamma: float = ...) -> None: ...
    @overload
    def setTransferFunction(self, transferFunctionTable: Sequence[int]) -> None: ...
    def setTransferFunctions(self, redTransferFunctionTable: Sequence[int], greenTransferFunctionTable: Sequence[int], blueTransferFunctionTable: Sequence[int]) -> None: ...
    def swap(self, colorSpace: Union[PySide6.QtGui.QColorSpace, PySide6.QtGui.QColorSpace.NamedColorSpace]) -> None: ...
    def transferFunction(self) -> PySide6.QtGui.QColorSpace.TransferFunction: ...
    def transformationToColorSpace(self, colorspace: Union[PySide6.QtGui.QColorSpace, PySide6.QtGui.QColorSpace.NamedColorSpace]) -> PySide6.QtGui.QColorTransform: ...
    @overload
    def withTransferFunction(self, transferFunction: PySide6.QtGui.QColorSpace.TransferFunction, gamma: float = ...) -> PySide6.QtGui.QColorSpace: ...
    @overload
    def withTransferFunction(self, transferFunctionTable: Sequence[int]) -> PySide6.QtGui.QColorSpace: ...
    def withTransferFunctions(self, redTransferFunctionTable: Sequence[int], greenTransferFunctionTable: Sequence[int], blueTransferFunctionTable: Sequence[int]) -> PySide6.QtGui.QColorSpace: ...


class QColorTransform(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, colorTransform: PySide6.QtGui.QColorTransform) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def isIdentity(self) -> bool: ...
    @overload
    def map(self, argb: int) -> int: ...
    @overload
    def map(self, color: Union[PySide6.QtGui.QColor, str, PySide6.QtGui.QRgba64, Any, PySide6.QtCore.Qt.GlobalColor, int]) -> PySide6.QtGui.QColor: ...
    @overload
    def map(self, rgba64: PySide6.QtGui.QRgba64) -> PySide6.QtGui.QRgba64: ...
    def swap(self, other: PySide6.QtGui.QColorTransform) -> None: ...


class QConicalGradient(PySide6.QtGui.QGradient):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, QConicalGradient: PySide6.QtGui.QConicalGradient) -> None: ...
    @overload
    def __init__(self, center: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], startAngle: float) -> None: ...
    @overload
    def __init__(self, cx: float, cy: float, startAngle: float) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def angle(self) -> float: ...
    def center(self) -> PySide6.QtCore.QPointF: ...
    def setAngle(self, angle: float) -> None: ...
    @overload
    def setCenter(self, center: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> None: ...
    @overload
    def setCenter(self, x: float, y: float) -> None: ...


class QContextMenuEvent(PySide6.QtGui.QInputEvent):

    class Reason(enum.Enum):

        Mouse                    : QContextMenuEvent.Reason = ... # 0x0
        Keyboard                 : QContextMenuEvent.Reason = ... # 0x1
        Other                    : QContextMenuEvent.Reason = ... # 0x2


    @overload
    def __init__(self, arg__1: PySide6.QtGui.QContextMenuEvent) -> None: ...
    @overload
    def __init__(self, reason: PySide6.QtGui.QContextMenuEvent.Reason, pos: PySide6.QtCore.QPoint) -> None: ...
    @overload
    def __init__(self, reason: PySide6.QtGui.QContextMenuEvent.Reason, pos: PySide6.QtCore.QPoint, globalPos: PySide6.QtCore.QPoint, modifiers: PySide6.QtCore.Qt.KeyboardModifier = ...) -> None: ...

    def clone(self) -> PySide6.QtGui.QContextMenuEvent: ...
    def globalPos(self) -> PySide6.QtCore.QPoint: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def pos(self) -> PySide6.QtCore.QPoint: ...
    def reason(self) -> PySide6.QtGui.QContextMenuEvent.Reason: ...
    def x(self) -> int: ...
    def y(self) -> int: ...


class QCursor(Shiboken.Object):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, bitmap: Union[PySide6.QtGui.QBitmap, str], mask: Union[PySide6.QtGui.QBitmap, str], hotX: int = ..., hotY: int = ...) -> None: ...
    @overload
    def __init__(self, cursor: Union[PySide6.QtGui.QCursor, PySide6.QtCore.Qt.CursorShape, PySide6.QtGui.QPixmap]) -> None: ...
    @overload
    def __init__(self, pixmap: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage], hotX: int = ..., hotY: int = ...) -> None: ...
    @overload
    def __init__(self, shape: PySide6.QtCore.Qt.CursorShape) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def __lshift__(self, outS: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    def __rshift__(self, inS: PySide6.QtCore.QDataStream) -> PySide6.QtCore.QDataStream: ...
    @overload
    def bitmap(self) -> PySide6.QtGui.QBitmap: ...
    @overload
    def bitmap(self, arg__1: PySide6.QtCore.Qt.ReturnByValueConstant) -> PySide6.QtGui.QBitmap: ...
    def hotSpot(self) -> PySide6.QtCore.QPoint: ...
    @overload
    def mask(self) -> PySide6.QtGui.QBitmap: ...
    @overload
    def mask(self, arg__1: PySide6.QtCore.Qt.ReturnByValueConstant) -> PySide6.QtGui.QBitmap: ...
    def pixmap(self) -> PySide6.QtGui.QPixmap: ...
    @overload
    @staticmethod
    def pos() -> PySide6.QtCore.QPoint: ...
    @overload
    @staticmethod
    def pos(screen: PySide6.QtGui.QScreen) -> PySide6.QtCore.QPoint: ...
    @overload
    @staticmethod
    def setPos(p: PySide6.QtCore.QPoint) -> None: ...
    @overload
    @staticmethod
    def setPos(screen: PySide6.QtGui.QScreen, p: PySide6.QtCore.QPoint) -> None: ...
    @overload
    @staticmethod
    def setPos(screen: PySide6.QtGui.QScreen, x: int, y: int) -> None: ...
    @overload
    @staticmethod
    def setPos(x: int, y: int) -> None: ...
    def setShape(self, newShape: PySide6.QtCore.Qt.CursorShape) -> None: ...
    def shape(self) -> PySide6.QtCore.Qt.CursorShape: ...
    def swap(self, other: Union[PySide6.QtGui.QCursor, PySide6.QtCore.Qt.CursorShape, PySide6.QtGui.QPixmap]) -> None: ...


class QDesktopServices(Shiboken.Object):

    def __init__(self) -> None: ...

    @staticmethod
    def openUrl(url: Union[PySide6.QtCore.QUrl, str]) -> bool: ...
    @staticmethod
    def setUrlHandler(scheme: str, receiver: PySide6.QtCore.QObject, method: Union[bytes, bytearray, memoryview]) -> None: ...
    @staticmethod
    def unsetUrlHandler(scheme: str) -> None: ...


class QDoubleValidator(PySide6.QtGui.QValidator):

    bottomChanged            : ClassVar[Signal] = ... # bottomChanged(double)
    decimalsChanged          : ClassVar[Signal] = ... # decimalsChanged(int)
    notationChanged          : ClassVar[Signal] = ... # notationChanged(QDoubleValidator::Notation)
    topChanged               : ClassVar[Signal] = ... # topChanged(double)

    class Notation(enum.Enum):

        StandardNotation         : QDoubleValidator.Notation = ... # 0x0
        ScientificNotation       : QDoubleValidator.Notation = ... # 0x1


    @overload
    def __init__(self, bottom: float, top: float, decimals: int, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...
    @overload
    def __init__(self, parent: Optional[PySide6.QtCore.QObject] = ...) -> None: ...

    def bottom(self) -> float: ...
    def decimals(self) -> int: ...
    def fixup(self, input: str) -> str: ...
    def notation(self) -> PySide6.QtGui.QDoubleValidator.Notation: ...
    def setBottom(self, arg__1: float) -> None: ...
    def setDecimals(self, arg__1: int) -> None: ...
    def setNotation(self, arg__1: PySide6.QtGui.QDoubleValidator.Notation) -> None: ...
    @overload
    def setRange(self, bottom: float, top: float) -> None: ...
    @overload
    def setRange(self, bottom: float, top: float, decimals: int) -> None: ...
    def setTop(self, arg__1: float) -> None: ...
    def top(self) -> float: ...
    def validate(self, arg__1: str, arg__2: int) -> object: ...


class QDrag(PySide6.QtCore.QObject):

    actionChanged            : ClassVar[Signal] = ... # actionChanged(Qt::DropAction)
    targetChanged            : ClassVar[Signal] = ... # targetChanged(QObject*)

    def __init__(self, dragSource: PySide6.QtCore.QObject) -> None: ...

    @staticmethod
    def cancel() -> None: ...
    def defaultAction(self) -> PySide6.QtCore.Qt.DropAction: ...
    def dragCursor(self, action: PySide6.QtCore.Qt.DropAction) -> PySide6.QtGui.QPixmap: ...
    @overload
    def exec(self, supportedActions: PySide6.QtCore.Qt.DropAction, defaultAction: PySide6.QtCore.Qt.DropAction) -> PySide6.QtCore.Qt.DropAction: ...
    @overload
    def exec(self, supportedActions: PySide6.QtCore.Qt.DropAction = ...) -> PySide6.QtCore.Qt.DropAction: ...
    @overload
    def exec_(self, arg__1: PySide6.QtCore.Qt.DropAction, arg__2: PySide6.QtCore.Qt.DropAction) -> PySide6.QtCore.Qt.DropAction: ...
    @overload
    def exec_(self, supportedActions: PySide6.QtCore.Qt.DropAction = ...) -> PySide6.QtCore.Qt.DropAction: ...
    def hotSpot(self) -> PySide6.QtCore.QPoint: ...
    def mimeData(self) -> PySide6.QtCore.QMimeData: ...
    def pixmap(self) -> PySide6.QtGui.QPixmap: ...
    def setDragCursor(self, cursor: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage], action: PySide6.QtCore.Qt.DropAction) -> None: ...
    def setHotSpot(self, hotspot: PySide6.QtCore.QPoint) -> None: ...
    def setMimeData(self, data: PySide6.QtCore.QMimeData) -> None: ...
    def setPixmap(self, arg__1: Union[PySide6.QtGui.QPixmap, PySide6.QtGui.QImage]) -> None: ...
    def source(self) -> PySide6.QtCore.QObject: ...
    def supportedActions(self) -> PySide6.QtCore.Qt.DropAction: ...
    def target(self) -> PySide6.QtCore.QObject: ...


class QDragEnterEvent(PySide6.QtGui.QDragMoveEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QDragEnterEvent) -> None: ...
    @overload
    def __init__(self, pos: PySide6.QtCore.QPoint, actions: PySide6.QtCore.Qt.DropAction, data: PySide6.QtCore.QMimeData, buttons: PySide6.QtCore.Qt.MouseButton, modifiers: PySide6.QtCore.Qt.KeyboardModifier) -> None: ...

    def __repr__(self) -> object: ...
    def clone(self) -> PySide6.QtGui.QDragEnterEvent: ...


class QDragLeaveEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, arg__1: PySide6.QtGui.QDragLeaveEvent) -> None: ...

    def __repr__(self) -> object: ...
    def clone(self) -> PySide6.QtGui.QDragLeaveEvent: ...


class QDragMoveEvent(PySide6.QtGui.QDropEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QDragMoveEvent) -> None: ...
    @overload
    def __init__(self, pos: PySide6.QtCore.QPoint, actions: PySide6.QtCore.Qt.DropAction, data: PySide6.QtCore.QMimeData, buttons: PySide6.QtCore.Qt.MouseButton, modifiers: PySide6.QtCore.Qt.KeyboardModifier, type: PySide6.QtCore.QEvent.Type = ...) -> None: ...

    def __repr__(self) -> object: ...
    @overload
    def accept(self) -> None: ...
    @overload
    def accept(self, r: PySide6.QtCore.QRect) -> None: ...
    def answerRect(self) -> PySide6.QtCore.QRect: ...
    def clone(self) -> PySide6.QtGui.QDragMoveEvent: ...
    @overload
    def ignore(self) -> None: ...
    @overload
    def ignore(self, r: PySide6.QtCore.QRect) -> None: ...


class QDropEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QDropEvent) -> None: ...
    @overload
    def __init__(self, pos: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], actions: PySide6.QtCore.Qt.DropAction, data: PySide6.QtCore.QMimeData, buttons: PySide6.QtCore.Qt.MouseButton, modifiers: PySide6.QtCore.Qt.KeyboardModifier, type: PySide6.QtCore.QEvent.Type = ...) -> None: ...

    def __repr__(self) -> object: ...
    def acceptProposedAction(self) -> None: ...
    def buttons(self) -> PySide6.QtCore.Qt.MouseButton: ...
    def clone(self) -> PySide6.QtGui.QDropEvent: ...
    def dropAction(self) -> PySide6.QtCore.Qt.DropAction: ...
    def keyboardModifiers(self) -> PySide6.QtCore.Qt.KeyboardModifier: ...
    def mimeData(self) -> PySide6.QtCore.QMimeData: ...
    def modifiers(self) -> PySide6.QtCore.Qt.KeyboardModifier: ...
    def mouseButtons(self) -> PySide6.QtCore.Qt.MouseButton: ...
    def pos(self) -> PySide6.QtCore.QPoint: ...
    def posF(self) -> PySide6.QtCore.QPointF: ...
    def position(self) -> PySide6.QtCore.QPointF: ...
    def possibleActions(self) -> PySide6.QtCore.Qt.DropAction: ...
    def proposedAction(self) -> PySide6.QtCore.Qt.DropAction: ...
    def setDropAction(self, action: PySide6.QtCore.Qt.DropAction) -> None: ...
    def source(self) -> PySide6.QtCore.QObject: ...


class QEnterEvent(PySide6.QtGui.QSinglePointEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QEnterEvent) -> None: ...
    @overload
    def __init__(self, localPos: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], scenePos: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], globalPos: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], device: PySide6.QtGui.QPointingDevice = ...) -> None: ...

    def clone(self) -> PySide6.QtGui.QEnterEvent: ...
    def globalPos(self) -> PySide6.QtCore.QPoint: ...
    def globalX(self) -> int: ...
    def globalY(self) -> int: ...
    def localPos(self) -> PySide6.QtCore.QPointF: ...
    def pos(self) -> PySide6.QtCore.QPoint: ...
    def screenPos(self) -> PySide6.QtCore.QPointF: ...
    def windowPos(self) -> PySide6.QtCore.QPointF: ...
    def x(self) -> int: ...
    def y(self) -> int: ...


class QEventPoint(Shiboken.Object):

    class State(enum.Enum):

        Unknown                  : QEventPoint.State = ... # 0x0
        Pressed                  : QEventPoint.State = ... # 0x1
        Updated                  : QEventPoint.State = ... # 0x2
        Stationary               : QEventPoint.State = ... # 0x4
        Released                 : QEventPoint.State = ... # 0x8


    @overload
    def __init__(self, id: int = ..., device: Optional[PySide6.QtGui.QPointingDevice] = ...) -> None: ...
    @overload
    def __init__(self, other: PySide6.QtGui.QEventPoint) -> None: ...
    @overload
    def __init__(self, pointId: int, state: PySide6.QtGui.QEventPoint.State, scenePosition: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element], globalPosition: Union[PySide6.QtCore.QPointF, PySide6.QtCore.QPoint, PySide6.QtGui.QPainterPath.Element]) -> None: ...

    @staticmethod
    def __copy__() -> None: ...
    def device(self) -> PySide6.QtGui.QPointingDevice: ...
    def ellipseDiameters(self) -> PySide6.QtCore.QSizeF: ...
    def globalGrabPosition(self) -> PySide6.QtCore.QPointF: ...
    def globalLastPosition(self) -> PySide6.QtCore.QPointF: ...
    def globalPosition(self) -> PySide6.QtCore.QPointF: ...
    def globalPressPosition(self) -> PySide6.QtCore.QPointF: ...
    def grabPosition(self) -> PySide6.QtCore.QPointF: ...
    def id(self) -> int: ...
    def isAccepted(self) -> bool: ...
    def lastNormalizedPos(self) -> PySide6.QtCore.QPointF: ...
    def lastPos(self) -> PySide6.QtCore.QPointF: ...
    def lastPosition(self) -> PySide6.QtCore.QPointF: ...
    def lastScenePos(self) -> PySide6.QtCore.QPointF: ...
    def lastScreenPos(self) -> PySide6.QtCore.QPointF: ...
    def lastTimestamp(self) -> int: ...
    def normalizedPos(self) -> PySide6.QtCore.QPointF: ...
    def normalizedPosition(self) -> PySide6.QtCore.QPointF: ...
    def pos(self) -> PySide6.QtCore.QPointF: ...
    def position(self) -> PySide6.QtCore.QPointF: ...
    def pressPosition(self) -> PySide6.QtCore.QPointF: ...
    def pressTimestamp(self) -> int: ...
    def pressure(self) -> float: ...
    def rotation(self) -> float: ...
    def sceneGrabPosition(self) -> PySide6.QtCore.QPointF: ...
    def sceneLastPosition(self) -> PySide6.QtCore.QPointF: ...
    def scenePos(self) -> PySide6.QtCore.QPointF: ...
    def scenePosition(self) -> PySide6.QtCore.QPointF: ...
    def scenePressPosition(self) -> PySide6.QtCore.QPointF: ...
    def screenPos(self) -> PySide6.QtCore.QPointF: ...
    def setAccepted(self, accepted: bool = ...) -> None: ...
    def startNormalizedPos(self) -> PySide6.QtCore.QPointF: ...
    def startPos(self) -> PySide6.QtCore.QPointF: ...
    def startScenePos(self) -> PySide6.QtCore.QPointF: ...
    def startScreenPos(self) -> PySide6.QtCore.QPointF: ...
    def state(self) -> PySide6.QtGui.QEventPoint.State: ...
    def swap(self, other: PySide6.QtGui.QEventPoint) -> None: ...
    def timeHeld(self) -> float: ...
    def timestamp(self) -> int: ...
    def uniqueId(self) -> PySide6.QtGui.QPointingDeviceUniqueId: ...
    def velocity(self) -> PySide6.QtGui.QVector2D: ...


class QExposeEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QExposeEvent) -> None: ...
    @overload
    def __init__(self, m_region: Union[PySide6.QtGui.QRegion, PySide6.QtGui.QBitmap, PySide6.QtGui.QPolygon, PySide6.QtCore.QRect]) -> None: ...

    def clone(self) -> PySide6.QtGui.QExposeEvent: ...
    def region(self) -> PySide6.QtGui.QRegion: ...


class QFileOpenEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QFileOpenEvent) -> None: ...
    @overload
    def __init__(self, file: str) -> None: ...
    @overload
    def __init__(self, url: Union[PySide6.QtCore.QUrl, str]) -> None: ...

    def clone(self) -> PySide6.QtGui.QFileOpenEvent: ...
    def file(self) -> str: ...
    def openFile(self, file: PySide6.QtCore.QFile, flags: PySide6.QtCore.QIODeviceBase.OpenModeFlag) -> bool: ...
    def url(self) -> PySide6.QtCore.QUrl: ...


class QFocusEvent(PySide6.QtCore.QEvent):

    @overload
    def __init__(self, arg__1: PySide6.QtGui.QFocusEvent) -> None: ...
    @overload
    def __init__(self, type: PySide6.QtCore.QEvent.Type, reason: PySide6.QtCore.Qt.FocusReason = ...) -> None: ...

    def __repr__(self) -> object: ...
    def clone(self) -> PySide6.QtGui.QFocusEvent: ...
    def gotFocus(self) -> bool: ...
    def lostFocus(self) -> bool: ...
    def reason(self) -> PySide6.QtCore.Qt.FocusReason: ...


class QFont(Shiboken.Object):

    class Capitalization(enum.Enum):

        MixedCase                : QFont.Capitalization = ... # 0x0
        AllUppercase             : QFont.Capitalization = ... # 0x1
        AllLowercase             : QFont.Capitalization = ... # 0x2
        SmallCaps                : QFont.Capitalization = ... # 0x3
        Capitalize               : QFont.Capitalization = ... # 0x4

    class HintingPreference(enum.Enum):

        PreferDefaultHinting     : QFont.HintingPreference = ... # 0x0
        PreferNoHinting          : QFont.HintingPreference = ... # 0x1
        PreferVerticalHinting    : QFont.HintingPreference = ... # 0x2
        PreferFullHinting        : QFont.HintingPreference = ... # 0x3

    class SpacingType(enum.Enum):

        PercentageSpacing        : QFont.SpacingType = ... # 0x0
        AbsoluteSpacing          : QFont.SpacingType = ... # 0x1

    class Stretch(enum.IntEnum):

        AnyStretch               : QFont.Stretch = ... # 0x0
        UltraCondensed           : QFont.Stretch = ... # 0x32
        ExtraCondensed           : QFont.Stretch = ... # 0x3e
        Condensed                : QFont.Stretch = ... # 0x4b
        SemiCondensed            : QFont.Stretch = ... # 0x57
        Unstretched              : QFont.Stretch = ... # 0x64
        SemiExpanded             : QFont.Stretch = ... # 0x70
        Expanded                 : QFont.Stretch = ... # 0x7d
        ExtraExpanded            : QFont.Stretch = ... # 0x96
        UltraExpanded            : QFont.Stretch = ... # 0xc8

    class Style(enum.Enum):

        StyleNormal              : QFont.Style = ... # 0x0
        StyleItalic              : QFont.Style = ... # 0x1
        StyleOblique             : QFont.Style = ... # 0x2

    class StyleHint(enum.Enum):

        Helvetica                : QFont.StyleHint = ... # 0x0
        SansSerif                : QFont.StyleHint = ... # 0x0
        Serif                    : QFont.StyleHint = ... # 0x1
        Times                    : QFont.StyleHint = ... # 0x1
        Courier                  : QFont.StyleHint = ... # 0x2
        TypeWriter               : QFont.StyleHint = ... # 0x2
        Decorative               : QFont.StyleHint = ... # 0x3
        OldEnglish               : QFont.StyleHint = ... # 0x3
        System                   : QFont.StyleHint = ... # 0x4
        AnyStyle                 : QFont.StyleHint = ... # 0x5
        Cursive                  : QFont.StyleHint = ... # 0x6
        Monospace                : QFont.StyleHint = ... # 0x7
        Fantasy                  : QFont.StyleHint = ... # 0x8

    class StyleStrategy(enum.Flag):

        PreferDefault            : QFont.StyleStrategy = ... # 0x1
        PreferBitmap             : QFont.StyleStrategy = ... # 0x2
        PreferDevice             : QFont.StyleStrategy = ... # 0x4
        PreferOutline            : QFont.StyleStrategy = ... # 0x8
        ForceOutline             : QFont.StyleStrategy = ... # 0x10
        PreferMatch              : QFont.StyleStrategy = ... # 0x20
        PreferQuality            : QFont.StyleStrategy = ... # 0x40
        PreferAntialias          : QFont.StyleStrategy = ... # 0x80
        NoAntialias              : QFont.StyleStrategy = ... # 0x100
        NoSubpixelAntialias      : QFont.StyleStrategy = ... # 0x800
        PreferNoShaping          : QFont.StyleStrategy = ... # 0x1000
        NoFontMerging            : QFont.StyleStrategy = ... # 0x8000

    class Tag(Shiboken.Object):

        @overload
        def __init__(self) -> None: ...
        @overload
        def __init__(self, Tag: PySide6.QtGui.QFont.Tag) -> None: ...

        @staticmethod
        def __copy__() -> None: ...
        def isValid(self) -> bool: ...
        def toString(self) -> PySide6.QtCore.QByteArray: ...
        def value(self) -> int: ...

    class Weight(enum.IntEnum):

        Thin                     : QFont.Weight = ... # 0x64
        ExtraLight               : QFont.Weight = ... # 0xc8
        Light                    : QFont.Weight = ... # 0x12c
        Normal                   : QFont.Weight = ... # 0x190
        Medium                   : QFont.Weight = ... # 0x1f4
        DemiBold                 : QFont.Weight = ... # 0x258
        Bold                     : QFont.Weight = ... # 0x2bc
        ExtraBold                : QFont.Weight = ... # 0x320
        Black                    : QFont.Weight = ... # 0x384


    @overload
    def __init__(self) -> None: ...
    @overload
    def __init__(self, families